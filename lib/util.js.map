{"version":3,"sources":["../src/util.js"],"names":["validate","markProcessed","isProcessed","getLocation","buildRegex","strOrRegex","RegExp","leadingComments","state","opts","ignore","filename","getFilename","map","some","regexp","test","length","every","comment","type","path","Object","defineProperty","enumerable","value","__jsdoc_to_assert_checked__","start","node","loc","line","column","file"],"mappings":";;;;;QASgBA,Q,GAAAA,Q;QAaAC,a,GAAAA,a;QAOAC,W,GAAAA,W;QAIAC,W,GAAAA,W;;AAhChB;;AACA;;;;AACA;;;;AAEA,SAASC,UAAT,CAAoBC,UAApB,EAAuD;AACnD,WAAO,sBAASA,UAAT,IAAuBA,UAAvB,GAAoC,IAAIC,MAAJ,CAAW,iCAAkBD,UAAlB,CAAX,CAA3C;AACH;AAEM,SAASL,QAAT,CAAkBO,eAAlB,EAAoDC,KAApD,EAAgE;AAAA,6BACnBA,KADmB,CAC9DC,IAD8D,CACvDC,MADuD;AAAA,QACvDA,MADuD,sCAC9C,CAAC,0BAAD,CAD8C;AAAA,QAE/DC,QAF+D,GAEpDC,YAAYJ,KAAZ,CAFoD;;;AAInE,QAAIE,OAAOG,GAAP,CAAWT,UAAX,EAAuBU,IAAvB,CAA4B;AAAA,eAAUC,OAAOC,IAAP,CAAYL,QAAZ,CAAV;AAAA,KAA5B,CAAJ,EAAkE;AAC9D,eAAO,KAAP;AACH;;AAED,WAAOJ,mBACHA,gBAAgBU,MADb,IAEHV,gBAAgBW,KAAhB,CAAsB;AAAA,eAAWC,QAAQC,IAAR,KAAiB,cAA5B;AAAA,KAAtB,CAFJ;AAGH;;AAEM,SAASnB,aAAT,CAAuBoB,IAAvB,EAA6B;AAChCC,WAAOC,cAAP,CAAsBF,IAAtB,EAA4B,6BAA5B,EAA2D;AACvDG,oBAAY,KAD2C;AAEvDC,eAAO;AAFgD,KAA3D;AAIH;;AAEM,SAASvB,WAAT,CAAqBmB,IAArB,EAA2B;AAC9B,WAAOA,KAAKK,2BAAZ;AACH;;AAEM,SAASvB,WAAT,CAAqBkB,IAArB,EAA2Bb,KAA3B,EAAkC;AACjC,mBAAWI,YAAYJ,KAAZ,CAAX;AAAA,QACCmB,KADD,GACUN,KAAKO,IAAL,CAAUC,GADpB,CACCF,KADD;;;AAGJ,WAAO,oBAAShB,QAAT,WAAyBgB,MAAMG,IAA/B,SAAuCH,MAAMI,MAA7C,CAAP;AACH;;AAED,SAASnB,WAAT,CAAqBJ,KAArB,EAA4B;AACxB,WAAOA,MAAMwB,IAAN,CAAWvB,IAAX,CAAgBE,QAAvB;AACH","file":"util.js","sourcesContent":["// @flow\nimport {basename, sep} from 'path';\nimport escapeRegexString from 'escape-regex-string';\nimport {isRegExp} from 'lodash';\n\nfunction buildRegex(strOrRegex: string|RegExp): RegExp {\n    return isRegExp(strOrRegex) ? strOrRegex : new RegExp(escapeRegexString(strOrRegex));\n}\n\nexport function validate(leadingComments: string[] | null, state: any) {\n    let {opts: {ignore = ['node_modules' + sep]}} = state,\n        filename = getFilename(state);\n\n    if (ignore.map(buildRegex).some(regexp => regexp.test(filename))) {\n        return false;\n    }\n\n    return leadingComments &&\n        leadingComments.length &&\n        leadingComments.every(comment => comment.type === 'CommentBlock');\n}\n\nexport function markProcessed(path) {\n    Object.defineProperty(path, '__jsdoc_to_assert_checked__', {\n        enumerable: false,\n        value: true\n    });\n}\n\nexport function isProcessed(path) {\n    return path.__jsdoc_to_assert_checked__;\n}\n\nexport function getLocation(path, state) {\n    let filename = getFilename(state),\n        {start} = path.node.loc;\n\n    return basename(filename) + `:${start.line}:${start.column}`;\n}\n\nfunction getFilename(state) {\n    return state.file.opts.filename;\n}\n"]}