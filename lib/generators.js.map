{"version":3,"sources":["../src/generators.js"],"names":["generateAssert","validation","location","tag","options","mode","logger","name","type","stringify","compact","message","generateWarn","generators","warn","debugger","trace","throw"],"mappings":";;;;;QAGgBA,c,GAAAA,c;;AAFhB;;;;;;AAEO,SAASA,cAAT,OAA8E;AAAA,QAArDC,UAAqD,QAArDA,UAAqD;AAAA,QAAzCC,QAAyC,QAAzCA,QAAyC;AAAA,QAA/BC,GAA+B,QAA/BA,GAA+B;AAAA,4BAA1BC,OAA0B;AAAA,QAAhBC,IAAgB,gBAAhBA,IAAgB;AAAA,QAAVC,MAAU,gBAAVA,MAAU;AAC7E,QAACC,IAAD,GAASJ,GAAT,CAACI,IAAD;AAAA,QACAC,IADA,GACO,mBAASA,IAAT,CAAcC,SAAd,CAAwBN,IAAIK,IAA5B,EAAkC,EAACE,SAAS,IAAV,EAAlC,CADP;;;AAGJ,QAAIC,iBAAcT,QAAd,oBAAsCK,IAAtC,uBAA6DC,IAA7D,4BAAuFD,IAAvF,MAAJ;;AAEA,qBAAeN,UAAf,WAA+BW,aAAa,EAACD,gBAAD,EAAUN,UAAV,EAAgBC,cAAhB,EAAb,CAA/B;AACH;;;AAED,SAASM,YAAT,QAA+C;AAAA,QAAxBD,OAAwB,SAAxBA,OAAwB;AAAA,QAAfN,IAAe,SAAfA,IAAe;AAAA,QAATC,MAAS,SAATA,MAAS;;AAC3C,QAAIA,MAAJ,EAAY;AACR,eAAOA,gBAAaK,OAAb,OAAP;AACH,KAFD,MAEO;AACH,eAAO,CAACE,WAAWR,IAAX,KAAoBQ,WAAWC,IAAhC,EAAsC,EAACH,gBAAD,EAAtC,CAAP;AACH;AACJ;;AAED,IAAME,aAAa;AACfC,UAAM;AAAA,YAAEH,OAAF,SAAEA,OAAF;AAAA,4CACcA,OADd;AAAA,KADS;AAIfI,cAAU;AAAA,YAAEJ,OAAF,SAAEA,OAAF;AAAA,2CACSA,OADT;AAAA,KAJK;AAQfK,WAAO;AAAA,YAAEL,OAAF,SAAEA,OAAF;AAAA,4CACaA,OADb;AAAA,KARQ;AAWfM,WAAO;AAAA,YAAEN,OAAF,SAAEA,OAAF;AAAA,8CACeA,OADf;AAAA;AAXQ,CAAnB","file":"generators.js","sourcesContent":["// @flow\nimport doctrine from 'doctrine';\n\nexport function generateAssert({validation, location, tag, options: {mode, logger}}) {\n    let {name} = tag,\n        type = doctrine.type.stringify(tag.type, {compact: true});\n\n    let message = `'${location}: Expected \\`${name}\\` to have type ${type}, got: ' + (typeof ${name})`;\n\n    return `if (!${validation}) {${generateWarn({message, mode, logger})}}`;\n}\n\nfunction generateWarn({message, mode, logger}) {\n    if (logger) {\n        return logger + `(${message})`;\n    } else {\n        return (generators[mode] || generators.warn)({message})\n    }\n}\n\nconst generators = {\n    warn: ({message}) => `\n        console._warn(${message});\n    `,\n    debugger: ({message}) => `\n        console.warn(${message});\n        debugger;\n    `,\n    trace: ({message}) => `\n        console.trace(${message});\n    `,\n    throw: ({message}) => `\n        throw new Error(${message});\n    `\n};\n"]}